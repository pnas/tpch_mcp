services:
  postgres:
    image: postgres:latest
    container_name: postgres-tpch
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: ./tpch_api/Dockerfile
    container_name: tpch-api
    ports:
      - "5000:5000"
    env_file:
      - ./.env
    depends_on:
      - postgres

  mcp_server:
    build:
      context: .
      dockerfile: ./mcp_server/Dockerfile
    container_name: mcp-server
    ports:
      - "8001:8001"
    env_file:
      - ./.env
    depends_on:
      - postgres

  gradio_ui:
    build:
      context: .
      dockerfile: ./tpch_api/Dockerfile
    container_name: gradio-ui
    ports:
      - "7860:7860"
    env_file:
      - ./.env
    depends_on:
      - mcp_server
    command: python gradio_app.py

  data_generator:
    build:
      context: .
      dockerfile: ./mcp_server/Dockerfile # Reusing mcp_server's Dockerfile as it has Python and dependencies
    container_name: tpch-data-generator
    env_file:
      - ./.env
    depends_on:
      - postgres
    command: python data_generation/generate_data.py

volumes:
  postgres_data: